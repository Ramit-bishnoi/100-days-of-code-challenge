// int Solution::solve(string A) {
//     int n = A.size();
//     int left = 0, right = n - 1, pre = right;
//     while(left < pre) {
//         if(A[left] == A[pre]) {
//             left++;
//             pre--;
//         }
//         else {
//             left = 0;
//             right--;
//             pre = right;
//         }
//     }
    
//     return n - (right + 1);
// }

int computeLPS(string &B){
    int n = B.size(), j = 0;
    int lps[n]; 
    lps[0] = 0;
    
    int i = 1; 
    while(i < n){
        if(B[i] == B[j]){
            j++;
            lps[i] = j;
            i++;
        }
        else{
            if(j!=0){
                j = lps[j-1];
            }
            else{
                lps[i] = 0;
                i++;
            }
        }
    }
    return n/2 - lps[n-1];
}

int Solution::solve(string A) {
    string B = A; 
    reverse(A.begin(), A.end());
    B += "$" + A;
    return computeLPS(B);
}

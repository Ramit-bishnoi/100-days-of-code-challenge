string one[] = {"", "one-", "two-", "three-", "four-", "five-", "six-", "seven-", "eight-", "nine-", "ten-", "eleven-", "twelve-", "thirteen-", "fourteen-", "fifteen-", "sixteen-", "seventeen-", "eighteen-", "nineteen-"};
string ten[] = {"", "", "twenty-", "thirty-", "forty-", "fifty-", "sixty-", "seventy-", "eighty-", "ninety-"};

string numToWords(int n, string s){
    string str = "";
    if (n > 19)
        str += ten[n / 10] + one[n % 10];
    else
        str += one[n];
    if (n)
        str += s;
    return str;
}
string convertToWords(long n){
    string out;
    out += numToWords((n / 10000000), "crore-");
    out += numToWords(((n / 100000) % 100), "lakh-");
    out += numToWords(((n / 1000) % 100), "thousand-");
    out += numToWords(((n / 100) % 10), "hundred-");
    if (n > 100 && n % 100)
        out += "and-";
    // handles digits at ones and tens places (if any)
    out += numToWords((n % 100), "");
    // Handling the n=0 case
    if (out == "")
        out = "zero";
    return out;
}
int Solution::solve(string A, string B) {
    string s = convertToWords(stoi(A));
    while(s.back() == '-' || s.back() == ' ')
        s.erase(s.end()-1);
    // cout << s << endl;
    if(s == B)
        return 1;
    return 0;
}

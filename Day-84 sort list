/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* merge(ListNode* left, ListNode* right) {
    if (!left) return right;
    if (!right) return left;

    ListNode* result = NULL;

    if (left->val <= right->val) {
        result = left;
        result->next = merge(left->next, right);
    } else {
        result = right;
        result->next = merge(left, right->next);
    }

    return result;
}
ListNode* findMiddle(ListNode* head) {
    ListNode* slow = head;
    ListNode* fast = head->next;

    while (fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}
ListNode* Solution::sortList(ListNode* A) {
    if (!A || !A->next) {
        return A;
    }
    ListNode* middle = findMiddle(A);
    ListNode* rightHalf = middle->next;
    middle->next = NULL;  
    ListNode* leftSorted = sortList(A);
    ListNode* rightSorted = sortList(rightHalf);

    return merge(leftSorted, rightSorted);
}
